/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oopassignment.sales_manager;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oopassignment.sales_manager.CrudHelper;

/**
 *
 * @author wongw
 */
public class EditSalesEntry extends javax.swing.JFrame {

    /**
     * Creates new form EditSalesEntry
     */
    public EditSalesEntry() {
        initComponents();
        populateSalesIDBox();
        populateSalesManagerBox();
        loadSalesTable(); 
        setupRowSelectionListener();
        salesIDSelection();
        clearFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        amountTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        quantitySoldTextField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        salesManagerBox = new javax.swing.JComboBox<>();
        salesDateChoose = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        salesIDBox = new javax.swing.JComboBox<>();
        itemIDLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        salesTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Edit Sales Entry");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Quantity Sold :");

        amountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountTextFieldActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Amount :");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Item ID :");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Sales Date :");

        quantitySoldTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantitySoldTextFieldActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Sales Manager Name:");

        salesManagerBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose an ID", "Item 1", "Item 2", "Item 3", "Item 4" }));
        salesManagerBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesManagerBoxActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Sales ID :");

        salesIDBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select ID", "Item 1", "Item 2", "Item 3", "Item 4" }));
        salesIDBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesIDBoxActionPerformed(evt);
            }
        });

        itemIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        itemIDLabel.setForeground(new java.awt.Color(51, 51, 51));
        itemIDLabel.setText("Default Item ID");

        salesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sales ID", "Sales Date", "Quantity Sold", "Amount ", "Sales Manager Name", "Item ID"
            }
        ));
        jScrollPane1.setViewportView(salesTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addGap(44, 44, 44)
                        .addComponent(saveButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7))
                                .addGap(26, 26, 26))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(salesDateChoose, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(amountTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(quantitySoldTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(salesIDBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(salesManagerBox, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(107, 107, 107))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(412, 412, 412)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(salesIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(salesDateChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(quantitySoldTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(amountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(itemIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(salesManagerBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void populateSalesIDBox() {
        String filePath = "SalesManager/Sales.txt";
        CrudHelper helper = new CrudHelper();

        try {
            List<String> lines = helper.readFile(filePath);
            if (lines.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Sales file is empty!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            salesIDBox.removeAllItems(); // Clear existing items

            for (String line : lines) {
                String[] data = line.split(",");
                if (data.length >= 1) { // Ensure there's at least one column
                    salesIDBox.addItem(data[0]); // Add SalesID
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error loading Sales IDs: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    
    
    private void populateSalesManagerBox() {
        
        String filePath = "SalesManager/Sales.txt"; // Path to User.txt

        // Clear existing items in the dropdown
        salesManagerBox.removeAllItems();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(","); 
                if (data.length >= 5 ) {
                    String name = data[4]; 
                    salesManagerBox.addItem(name); // Add username to dropdown
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error loading sales managers: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void loadSalesTable() {
        String salesFilePath = "SalesManager/Sales.txt";

        DefaultTableModel model = (DefaultTableModel) salesTable.getModel();
        model.setRowCount(0); // Clear existing rows

        try (BufferedReader reader = new BufferedReader(new FileReader(salesFilePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length == 6) { // Assuming 6 columns in Sales.txt
                    model.addRow(data);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error loading sales data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void setupRowSelectionListener() {
        salesTable.getSelectionModel().addListSelectionListener(event -> {
            if (!event.getValueIsAdjusting() && salesTable.getSelectedRow() != -1) {
                int selectedRow = salesTable.getSelectedRow();

                String salesID = (String) salesTable.getValueAt(selectedRow, 0);
                String salesDate = (String) salesTable.getValueAt(selectedRow, 1);
                String quantitySold = (String) salesTable.getValueAt(selectedRow, 2);
                String amount = (String) salesTable.getValueAt(selectedRow, 3);
                String salesManagerName = (String) salesTable.getValueAt(selectedRow, 4);
                String itemID = (String) salesTable.getValueAt(selectedRow, 5);

                salesIDBox.setSelectedItem(salesID);
                try {
                    salesDateChoose.setDate(new SimpleDateFormat("dd/MM/yyyy").parse(salesDate));
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                quantitySoldTextField.setText(quantitySold);
                amountTextField.setText(amount);
                salesManagerBox.setSelectedItem(salesManagerName);
                itemIDLabel.setText(itemID);
            }
        });
    }

    
    private void salesIDSelection() {
       salesIDBox.addActionListener(e -> {
           String selectedSalesID = (String) salesIDBox.getSelectedItem();
           if (selectedSalesID != null) {
               String filePath = "SalesManager/Sales.txt"; // Ensure the correct path is passed
               CrudHelper helper = new CrudHelper();

               try {
                   List<String> matches = helper.fileSearch(selectedSalesID, filePath); // Pass filePath here
                   if (!matches.isEmpty()) {
                       String[] data = matches.get(0).split(",");
                       if (data.length >= 6) {
                           salesDateChoose.setDate(new SimpleDateFormat("dd/MM/yyyy").parse(data[1]));
                           quantitySoldTextField.setText(data[2]);
                           amountTextField.setText(data[3]);
                           salesManagerBox.setSelectedItem(data[4]);
                           itemIDLabel.setText(data[5]);
                       }
                   } else {
                       clearFields();
                       JOptionPane.showMessageDialog(null, "No data found for the selected SalesID.", "Error", JOptionPane.ERROR_MESSAGE);
                   }
               } catch (Exception ex) {
                   JOptionPane.showMessageDialog(null, "Error processing SalesID: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
               }
           }
       });
   }
 
 
 
    private void clearFields() {
        salesDateChoose.setDate(null);
        quantitySoldTextField.setText("");
        amountTextField.setText("");
        salesManagerBox.setSelectedIndex(-1); // Deselect Sales Manager
        itemIDLabel.setText("");
    }


    
    
    
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        SalesEntryChoice choiceFrame = new SalesEntryChoice();

        choiceFrame.setVisible(true);

        this.dispose(); 
    }//GEN-LAST:event_backButtonActionPerformed

    private void amountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountTextFieldActionPerformed

    private void quantitySoldTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantitySoldTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantitySoldTextFieldActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed

        // Reset all text fields to blank
        quantitySoldTextField.setText("");
        amountTextField.setText("");

        // Reset date chooser (assuming salesDateChoose is a JDateChooser)
        salesDateChoose.setDate(null);

        // Reset combo boxes to default or blank
        salesManagerBox.setSelectedIndex(0); // Assuming index 0 is the default


        // Optionally, reset other UI components if necessary
        JOptionPane.showMessageDialog(null, "All fields have been reset.", "Reset", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        String salesFilePath = "SalesManager/Sales.txt";
        String inventoryFilePath = "InventoryManager/ItemEntry.txt";
        String selectedSalesID = (String) salesIDBox.getSelectedItem();

        if (selectedSalesID == null || selectedSalesID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a Sales ID to save changes.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            CrudHelper helper = new CrudHelper();

            // Load sales and inventory data
            List<SalesEntry> salesList = helper.loadSales(salesFilePath);
            List<Item> inventoryList = helper.loadInventory(inventoryFilePath);
            for (Item item : inventoryList) {
            System.out.println("Item ID: " + item.getItemID() +
                               ", Name: " + item.getItemName() +
                               ", Price: " + item.getItemPrice() +
                               ", Supplier Code: " + item.getSupplierCode() +
                               ", Description: " + item.getDescription() +
                               ", Stock Level: " + item.getStockLevel() +
                               ", Restock Level: " + item.getRestockLevel());
        }

            // Retrieve the selected sales entry and associated item
            SalesEntry selectedSale = null;
            for (SalesEntry sale : salesList) {
                if (sale.getSalesID().equals(selectedSalesID)) {
                    selectedSale = sale;
                    break;
                }
            }

            if (selectedSale == null) {
                JOptionPane.showMessageDialog(null, "Sales entry not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Item selectedItem = null;
            for (Item item : inventoryList) {
                if (item.getItemID().equals(selectedSale.getItemID())) {
                    selectedItem = item;
                    break;
                }
            }

            if (selectedItem == null) {
                JOptionPane.showMessageDialog(null, "Item not found in inventory!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            
            // Retrieve and validate stock
            int oldQuantitySold = selectedSale.getQuantitySold();
            int newQuantitySold = Integer.parseInt(quantitySoldTextField.getText());
            int availableStock = selectedItem.getStockLevel() + oldQuantitySold;

            if (newQuantitySold > availableStock) {
                JOptionPane.showMessageDialog(null, "Error: Not enough stock available!", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            
            // Update sales entry and inventory
            selectedSale.setQuantitySold(newQuantitySold);
            selectedSale.setSalesDate(new SimpleDateFormat("dd/MM/yyyy").format(salesDateChoose.getDate()));
            selectedSale.setAmount(Double.parseDouble(amountTextField.getText()));
            selectedSale.setSalesManagerName((String) salesManagerBox.getSelectedItem());

            int updatedStock = selectedItem.getStockLevel() - (newQuantitySold - oldQuantitySold);
            selectedItem.setStockLevel(updatedStock);
            System.out.println("Loaded Inventory Data:");
            System.out.println(inventoryList);
            

            // Save updated data back to files
            helper.updateFile(salesFilePath, salesList);
           
            helper.updateFile(inventoryFilePath, inventoryList);

            JOptionPane.showMessageDialog(null, "Changes saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Reload the table to reflect changes
            loadSalesTable();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error saving changes: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void salesManagerBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesManagerBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salesManagerBoxActionPerformed

    private void salesIDBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesIDBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salesIDBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditSalesEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditSalesEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditSalesEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditSalesEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditSalesEntry().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountTextField;
    private javax.swing.JButton backButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel itemIDLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField quantitySoldTextField;
    private com.toedter.calendar.JDateChooser salesDateChoose;
    private javax.swing.JComboBox<String> salesIDBox;
    private javax.swing.JComboBox<String> salesManagerBox;
    private javax.swing.JTable salesTable;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
