/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oopassignment.sales_manager;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oopassignment.purchase_manager.PurchaseOrder;

/**
 *
 * @author wongw
 */
public class CreateRequisition extends javax.swing.JFrame {

    /**
     * Creates new form CreateRequisition
     */
    public CreateRequisition() {
        initComponents();
        populateInventoryTable();
        populateItemIDBox();
        itemIDSelection();
        setupListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        createButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        itemIDBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        itemNameField = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        itemPriceField = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        quantitySoldTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        amountTextField = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Create Requisition");

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Item Name", "Item Price (RM)", "Supplier ID", "Description", "Quantity of Stock", "Reorder Stock"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Item Code Below Reorder Level :");

        itemIDBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Item Name :");

        itemNameField.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        itemNameField.setForeground(new java.awt.Color(102, 102, 102));
        itemNameField.setText("Default Item Name");

        jLabel7.setText("Item Price (RM) :");

        itemPriceField.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        itemPriceField.setForeground(new java.awt.Color(102, 102, 102));
        itemPriceField.setText("0.00");

        jLabel9.setText("Quantity :");

        quantitySoldTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantitySoldTextFieldActionPerformed(evt);
            }
        });

        jLabel10.setText("Total Amount:");

        amountTextField.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        amountTextField.setForeground(new java.awt.Color(102, 102, 102));
        amountTextField.setText("0.00");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Inventory Database");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(createButton)
                .addGap(21, 21, 21))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jButton2)
                .addGap(294, 294, 294)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(itemIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amountTextField)
                    .addComponent(quantitySoldTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(createButton)
                        .addGap(21, 21, 21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(itemIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(itemNameField))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(itemPriceField))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(quantitySoldTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(amountTextField))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1076, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 546, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quantitySoldTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantitySoldTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantitySoldTextFieldActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        String purchaseOrderFilePath = "PurchaseManager/PurchaseOrder.txt";
        String inventoryFilePath = "InventoryManager/ItemEntry.txt";

        try {
            CrudHelper helper = new CrudHelper();

            // Load inventory
            List<Item> inventory = helper.loadInventory(inventoryFilePath);
            System.out.println("Loaded Inventory:");
            inventory.forEach(item -> System.out.println("Item ID: " + item.getItemID()));

            // Get selected item
            String selectedItemID = (String) itemIDBox.getSelectedItem();
            System.out.println("Selected Item ID: " + selectedItemID);

            Item selectedItem = inventory.stream()
                .filter(item -> item.getItemID().trim().equalsIgnoreCase(selectedItemID.trim()))
                .findFirst()
                .orElse(null);

            if (selectedItem == null) {
                JOptionPane.showMessageDialog(null, "Item not found in inventory!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Get quantity sold
            int quantitySold = Integer.parseInt(quantitySoldTextField.getText().trim());



            // Generate new purchase ID

            String itemID = (String) itemIDBox.getSelectedItem();
            String itemName = itemNameField.getText();
            double amount = Double.parseDouble(amountTextField.getText().trim());
            System.out.println(amount);
            PurchaseOrder newPurchaseOrder = new PurchaseOrder(itemID,itemName,quantitySold,"In Progress", (int) amount);
            System.out.println(newPurchaseOrder);

            // Add the sales entry to the file using fileAdd
            newPurchaseOrder.writeToFile();

            // Display success message
            JOptionPane.showMessageDialog(null, "Purchase Order added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_createButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        sm_menu menuFrame = new sm_menu();

        menuFrame.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void populateInventoryTable(){
        
        String filePath = "InventoryManager/ItemEntry.txt"; // File path

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        try {
            CrudHelper helper = new CrudHelper(); 
            List<String> lines = helper.readFile(filePath); 

            model.setRowCount(0); // Clear table
            for (String line : lines) {
                String[] rowData = line.split("\t"); // Split each line by tab
                if (rowData.length >= 4) {
                    String[] filteredRow = { rowData[0], rowData[1], rowData[2], rowData[3], rowData[4], rowData[5], rowData[6] };
                    model.addRow(filteredRow);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error loading form data: " + e.getMessage());
        }
    }
    
    private void populateItemIDBox() {
        String filePath = "InventoryManager/ItemEntry.txt"; // Path to Inventory.txt

         // Clear existing items in the dropdown
         itemIDBox.removeAllItems();

         try {
             // Retrieve all lines from the Inventory file
             CrudHelper helper = new CrudHelper();
             List<String> lines = helper.readFile(filePath);

             // Iterate through each line and process the data
             for (String line : lines) {
                 String[] data = line.split("\t"); 

                 if (data.length == 7) { 
                     String itemID = data[0];
                     int stockLevel = Integer.parseInt(data[5].trim()); // Stock level at index 5
                     int restockLevel = Integer.parseInt(data[6].trim()); // Reorder level at index 6

                     // Check if the stock level is less than the reorder level
                     if (stockLevel < restockLevel) {
                         itemIDBox.addItem(itemID); // Add item ID to the combo box
                     }
                 }
             }
         } catch (Exception e) {
             JOptionPane.showMessageDialog(null, "Error loading Item IDs: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
             e.printStackTrace(); // Log the error for debugging
         }
     }
    
    private void itemIDSelection() {
       itemIDBox.addActionListener(e -> {
           String selectedSalesID = (String) itemIDBox.getSelectedItem();
           if (selectedSalesID != null) {
               String filePath = "InventoryManager/ItemEntry.txt"; 
               CrudHelper helper = new CrudHelper();

               try {
                   List<String> matches = helper.fileSearch(selectedSalesID, filePath); 
                   if (!matches.isEmpty()) {
                       String[] data = matches.get(0).split("\t");
                       if (data.length >= 7) {
                           itemNameField.setText(data[1]);
                           itemPriceField.setText(data[2]);
;
                       }
                   } else {
                       clearFields();
                       JOptionPane.showMessageDialog(null, "No data found for the selected ItemID.", "Error", JOptionPane.ERROR_MESSAGE);
                   }
               } catch (Exception ex) {
                   JOptionPane.showMessageDialog(null, "Error processing ItemID: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
               }
           }
       });
   }

    private void clearFields() {
        itemNameField.setText("");
        itemPriceField.setText("");
    }

    private void setupListeners() {
        // Listener for ItemID selection
        itemIDBox.addActionListener(e -> {
            updateItemPrice();
            updateAmount();
        });

        // Listener for QuantitySold input
        quantitySoldTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                updateAmount();
            }
        });
    }

        
    private double itemPrice = 0.0; // Store the selected item's price

    private void updateItemPrice() {
        String selectedItemID = (String) itemIDBox.getSelectedItem();
        if (selectedItemID != null && !selectedItemID.isEmpty()) {
            try {
                CrudHelper helper = new CrudHelper();
                List<Item> inventoryList = helper.loadInventory("InventoryManager/ItemEntry.txt");

                for (Item item : inventoryList) {
                    if (item.getItemID().equals(selectedItemID)) {
                        itemPrice = item.getItemPrice(); // Assume `getPrice()` returns the price of the item
                        break;
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error loading item price: " + e.getMessage(),
                                              "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void updateAmount() {
        try {
            String quantityText = quantitySoldTextField.getText().trim();
            int quantitySold = Integer.parseInt(quantityText);
            double amount = quantitySold * itemPrice;
            amountTextField.setText(String.format("%.2f", amount)); // Format to 2 decimal places
        } catch (NumberFormatException e) {
            // Clear amount if input is invalid
            amountTextField.setText("");
        }
    } 
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateRequisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateRequisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateRequisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateRequisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateRequisition().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amountTextField;
    private javax.swing.JButton createButton;
    private javax.swing.JComboBox<String> itemIDBox;
    private javax.swing.JLabel itemNameField;
    private javax.swing.JLabel itemPriceField;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField quantitySoldTextField;
    // End of variables declaration//GEN-END:variables
}
